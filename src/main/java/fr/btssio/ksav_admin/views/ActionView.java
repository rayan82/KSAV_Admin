package fr.btssio.ksav_admin.views;

import fr.btssio.ksav_admin.models.entities.RoleEntity;
import fr.btssio.ksav_admin.models.entities.UtilisateurEntity;
import fr.btssio.ksav_admin.utils.DateTool;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JPasswordField;

public class ActionView extends View {

    /**
     * Creates new form TestView
     */
    public ActionView() {
        initComponents();
    }

    @Override
    public void init() {
        String action = (String) this.getParam("action");
        this.actionLabel.setText((action.equals("add") ? "Ajouter" : "Modifier") + " un utilisateur");
        this.validButton.setText((action.equals("add") ? "Ajouter" : "Modifier"));

        List<RoleEntity> roles = (List<RoleEntity>) this.getParam("roles");
        DefaultComboBoxModel<Object> model = new DefaultComboBoxModel<>();
        model.addElement("Selectionner...");
        for (RoleEntity role : roles) {
            model.addElement(role);
        }
        this.roleInput.setModel((ComboBoxModel<Object>) model);

        if (action.equals("update")) {
            UtilisateurEntity user = (UtilisateurEntity) this.getParam("user");
            this.nomInput.setText(user.getNom());
            this.prenomInput.setText(user.getPrenom());
            this.dateNaissanceInput.setText(user.getDateNaissance() == null ? "" : DateTool.formatDate(user.getDateNaissance(), "dd/MM/yyyy"));
            this.sexeInput.setSelectedIndex(user.getSexe());

            int i = 0;
            RoleEntity role = roles.get(i);
            while (role.getIdRole() != user.getIdRole()) {
                i++;
                role = roles.get(i);
            }
            this.roleInput.setSelectedItem(role);

            this.mdpInput.setVisible(false);
            this.resetButton = new JButton("Réinitialiser");
            this.resetButton.setBounds(this.mdpInput.getX(), this.mdpInput.getY(), this.mdpInput.getWidth(), this.mdpInput.getHeight());
            this.add(this.resetButton);
        }
    }

    /**
     * Permet de retourner la valeur du champ nom
     *
     * @return Nom de l'utilisateur
     */
    public String getNom() {
        return this.nomInput.getText();
    }

    /**
     * Permet de retourner la valeur du champ prénom
     *
     * @return Prénom de l'utilisateur
     */
    public String getPrenom() {
        return this.prenomInput.getText();
    }

    /**
     * Permet de retourner la valeur du champ mot de passe
     *
     * @return Mot de passe de l'utilisateur
     */
    public String getMdp() {
        return (this.mdpInput.isVisible() ? String.valueOf(this.mdpInput.getPassword()) : ((UtilisateurEntity) this.getParam("user")).getMdp());
    }

    /**
     * Permet de retourner la valeur du champ date de naissance
     *
     * @return Date de naissance de l'utilisateur
     */
    public String getDateNaissance() {
        return this.dateNaissanceInput.getText();
    }

    /**
     * Permet de retourner la valeur du champ sexe
     *
     * @return Sexe de l'utilisateur
     */
    public int getSexe() {
        String sexe = (String) this.sexeInput.getSelectedItem();
        return (sexe.equals("Homme") ? 1 : (sexe.equals("Femme") ? 2 : 0));
    }

    /**
     * Permet de retourner la valeur du champ rôle
     *
     * @return Role de l'utilisateur
     */
    public int getRole() {
        Object role = this.roleInput.getSelectedItem();
        return (role.toString().equals("Selectionner...") ? 0 : ((RoleEntity) role).getIdRole());
    }

    /**
     * Permet de retourner l'object du champ du mot de passe
     *
     * @return Objet champ de mot de passe
     */
    public JPasswordField getMdpInput() {
        return this.mdpInput;
    }

    /**
     * Permet de retourner l'objet du bouton de réinitialisation du mot de passe
     *
     * @return Objet du bouton de réinitialisation
     */
    public JButton getResetButton() {
        return this.resetButton;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        actionLabel = new javax.swing.JLabel();
        nomInput = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        prenomInput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        sexeInput = new javax.swing.JComboBox<>();
        mdpInput = new javax.swing.JPasswordField();
        dateNaissanceInput = new javax.swing.JTextField();
        roleInput = new javax.swing.JComboBox<>();
        cancelButton = new javax.swing.JButton();
        validButton = new javax.swing.JButton();

        actionLabel.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N
        actionLabel.setText("? un utilisateur");

        nomInput.setToolTipText("");
        nomInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomInputActionPerformed(evt);
            }
        });
        nomInput.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isAlphabetic(c)) {
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {}

            @Override
            public void keyReleased(KeyEvent e) {}
        });

        jLabel1.setText("Nom :");

        prenomInput.setToolTipText("");
        prenomInput.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isAlphabetic(c)) {
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {}

            @Override
            public void keyReleased(KeyEvent e) {}
        });

        jLabel2.setText("Prénom :");

        jLabel3.setText("Mot de passe :");

        jLabel4.setText("Date de naissance (JJ/MM/AAAA) :");

        jLabel5.setText("Sexe :");

        jLabel6.setText("Role :");

        sexeInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sélectionner...", "Homme", "Femme" }));
        sexeInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sexeInputActionPerformed(evt);
            }
        });

        dateNaissanceInput.setToolTipText("");
        dateNaissanceInput.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if ((!Character.isDigit(c) && c != '/') || prenomInput.getText().length() > 10) {
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {}

            @Override
            public void keyReleased(KeyEvent e) {}
        });

        cancelButton.setText("Annuler");

        validButton.setText("?");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(actionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(nomInput)
                            .addComponent(prenomInput)
                            .addComponent(mdpInput)
                            .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sexeInput, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(roleInput, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(validButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateNaissanceInput))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(actionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(3, 3, 3)
                        .addComponent(nomInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(3, 3, 3)
                        .addComponent(prenomInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(3, 3, 3)
                        .addComponent(dateNaissanceInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addGap(3, 3, 3)
                        .addComponent(sexeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mdpInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roleInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(validButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nomInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomInputActionPerformed

    private void sexeInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sexeInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sexeInputActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel actionLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField dateNaissanceInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPasswordField mdpInput;
    private javax.swing.JTextField nomInput;
    private javax.swing.JTextField prenomInput;
    private javax.swing.JComboBox<Object> roleInput;
    private javax.swing.JComboBox<String> sexeInput;
    private javax.swing.JButton validButton;
    // End of variables declaration//GEN-END:variables
    private JButton resetButton;
}
